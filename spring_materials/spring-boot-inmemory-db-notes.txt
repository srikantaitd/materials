					=================================================================
					#		Spring Boot With H2 In-memory Database                  #
					=================================================================

- Process Involved In Using Actual Relational Database in Dev Environment:
  1. Need to Install the Database
  2. Need to Create the Schema
  3. Need to Create Required Tables
  4. Need to Populate the Date in the Tables
  5. Need to Connect the Application to the Database by Creating Datasource

- All these process creates following problems:
  1. Time consuming
  2. Not Flexible Enough for Unit Testing Of the Components
  3. Loss of Easiness Compared to In-memory database
  4. Error Prone

- In-memory Databases Provides Ideal Solution For these Problems.

- Springboot provides very easy integration support with H2 In-memory database.

- It Provides Faster Development Process to Quickly get running application with Sophisticated testing Env.

- It initializes at the time of application startup and destroyed at the time of application shutdown.

Q.	How did the Spring Boot Application connect to the database H2?
Ans: 
	- Sprinboot is Intelligent by its nature. 
	- Its auto-configuration feature searches for the h2 related jar files in the classpath. 
	- As far as H2 is concerned, as soon as Spring Boot sees H2 in the class path, it auto configures a data source similar to what you see below:

		spring.datasource.url=jdbc:h2:mem:testdb
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=

		spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
	
		It knows that you are using an inmemory database H2 and it uses the default url if you don’t provide one.

Q : How does H2 and Spring Boot combination work?
Ans: 
	-First and most important thing - Spring Boot is intelligent.

	-If you are talking to an in memory db, by default, it looks at the entities and creates the database 
	and the tables.

	-However, if you connect to a mysql database, Spring Boot knows that its a permanent database. By default, 
	it expects you to set up the database, set up the tables and it uses the connection that you established.	 

Q. Where is the database connection info specified? How does it know to automatically connect to H2?
Ans:
	- Spring Boot auto-configuration attempts to automatically configure your Spring application 
	  based on the jar dependencies that you have added. 
	- For example, If HSQLDB is on your classpath, and you have not manually configured 
   	  any database connection beans, then Spring Boot will auto-configure an in-memory database.

Q: What happens if H2 is not in the classpath?
Ans: You get this error :
		Cannot determine embedded database driver class for database type NONE
	 
	 Add H2 to the pom.xml and Restart your server

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>	  
Q: Why is the data lost between restart?
Ans: 
	- H2 is an in memory database. Its not a persisted database.
	- H2 is a great tool for learning because you need zero setup.  

Q: Error : Table is not created automatically in h2 embedded db or I’m unable to see the tables ?
Ans:
	- Usually, the table’s are created but the url used in H2 GUI Console is wrong.

	- In the browser, change the database url to jdbc:h2:mem:testdb 

Q: Error : H2 Console is not Launched up?
Ans:
	- Try enabling it in the application.properties
		spring.h2.console.enabled=true	

Q: How did the insert query from data.sql run at application startup?
Ans:
	- That’s part of the Spring Boot startup routine. 
	- Any queries in data.sql are run at application startup. 
	- more information available here:
        https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html	
		
		
====================================================
Running H2 as a persisted database with Spring Boot:
====================================================
- H2 also has a persisted database mode
- With this configuration, the data is not lost even after spring boot restart and computer restart.
- H2 being very rarely used in this way. 
- Its better to use persistent database like  MySQL, Oracle or some other relational database.
- To Use H2  persistent database we need the below configuration in the application.properties file:

	application.properties
	---------------------
	spring.datasource.name=yourdbname
	spring.datasource.driverClassName=org.h2.Driver
	 
	spring.datasource.initialize=false
	spring.datasource.url=jdbc:h2:file:~/yourdbname;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
	 
	spring.jpa.hibernate.ddl-auto = update		
		
Using H2 for unit tests:
========================
- The standard properties file that Spring Boot picks up automatically when running 
  an application is called application.properties and resides in the src/main/resources folder.

- If we want to use different properties for tests, then we can override the properties file 
  in the main folder by placing another file with the same name in src/test/resources.

- The application.properties file in src/test/resources folder should contain the 
  standard key-value pairs necessary for configuring a in memory connection.

- First add the dependencies for your database driver (mysql in the example below) 
  and make the dependency for h2 test scoped.

	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
	</dependency>

	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<scope>test</scope>
	</dependency>

- Use the mysql database for your real code

	src\main\resources\application.properties
	-----------------------------------------
	spring.jpa.hibernate.ddl-auto=none
	spring.datasource.url=jdbc:mysql://localhost:3306/person_example
	spring.datasource.username=personuser
	spring.datasource.password=YOUR_PASSWORD
	Use in memory database for your unit tests

	src\test\resources\application.properties
	-----------------------------------------
	spring.datasource.driver-class-name=org.h2.Driver
	spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
	spring.datasource.username=sa
	spring.datasource.password=sa	